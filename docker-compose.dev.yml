services:
  api:
    container_name: nestjs
    build:
      context: .
      dockerfile: apps/api/docker/Dockerfile.dev
      args:
        - DATABASE_URL=postgresql://postgres:prisma@db:5432/postgres?schema=public
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:prisma@db:5432/postgres?schema=public
    volumes:
      # Source code for hot reloading
      - ./apps/api:/usr/src/app/apps/api
      # Prisma schema access
      - ./tools:/usr/src/app/tools
      # Protect node_modules from being overwritten
      - /usr/src/app/node_modules
      - /usr/src/app/apps/api/node_modules
      # Protect Prisma generated client from being overwritten
      - /usr/src/app/tools/prisma/generated
    networks:
      - db
    depends_on:
      db:
        condition: service_healthy

  web:
    container_name: nextjs
    build:
      context: .
      dockerfile: apps/web/docker/Dockerfile.dev
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      # Source code for hot reloading
      - ./apps/web:/usr/src/app/apps/web
      # Protect node_modules and build artifacts from being overwritten
      - /usr/src/app/node_modules
      - /usr/src/app/apps/web/node_modules
      - /usr/src/app/apps/web/.next

  db:
    container_name: postgres
    image: postgres
    # nothing here is production ready, just for development
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prisma
      PGDATA: /data/postgres
      POSTGRES_DB: postgres
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d postgres -U postgres']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 3s

networks:
  db:
    driver: bridge

volumes:
  db:
    name: nest-db
