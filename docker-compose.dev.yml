services:
  api:
    container_name: nestjs
    build:
      context: .
      dockerfile: apps/api/docker/Dockerfile.dev
      args:
        - DATABASE_URL=postgresql://postgres:prisma@db:5432/postgres?schema=public
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:prisma@db:5432/postgres?schema=public
      - CORS_ORIGINS=http://localhost:3000
      - CORS_CREDENTIALS=true
    volumes:
      - ./apps/api:/usr/src/app/apps/api
      - ./tools:/usr/src/app/tools
      - ./shared:/usr/src/app/shared
      - /usr/src/app/node_modules
      - /usr/src/app/apps/api/node_modules
      - /usr/src/app/tools/prisma/generated
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  web:
    container_name: nextjs
    build:
      context: .
      dockerfile: apps/web/docker/Dockerfile.dev
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./apps/web:/usr/src/app/apps/web
      - ./shared:/usr/src/app/shared
      - ./tools:/usr/src/app/tools
      - ./tsconfig.base.json:/usr/src/app/tsconfig.base.json
      - /usr/src/app/node_modules
      - /usr/src/app/apps/web/node_modules
      - /usr/src/app/apps/web/.next
    networks:
      - app-network
    depends_on:
      - api

  db:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prisma
      PGDATA: /data/postgres
      POSTGRES_DB: postgres
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d postgres -U postgres']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 3s

networks:
  app-network:
    driver: bridge

volumes:
  db:
    name: nest-db
