# Stage 1: Build stage
FROM node:24-alpine3.21 AS builder

# Set the working directory
WORKDIR /usr/src/app

# Enable corepack and prepare pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy package files first to leverage Docker cache
COPY package.json pnpm-lock.yaml* ./

# Install ALL dependencies (including devDependencies) for build
RUN pnpm install

# Copy the rest of the application
COPY . .

# Generate Prisma client with correct binary targets for Alpine Linux
RUN pnpm run prisma:generate

# Build the application
RUN pnpm build

# Stage 2: Production stage
FROM node:24-alpine3.21 AS production

WORKDIR /usr/src/app

# Install netcat
RUN apk add --no-cache netcat-openbsd

# Enable corepack and prepare pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy package files
COPY package.json pnpm-lock.yaml* ./

# Install production dependencies AND prisma
RUN pnpm install --prod && \
    pnpm add -D prisma @prisma/client

# Copy built application from builder
COPY --from=builder /usr/src/app/dist ./dist

# Copy Prisma schema and generated client
COPY --from=builder /usr/src/app/tools/prisma ./tools/prisma

# Copy the entire generated client directory with binaries
COPY --from=builder /usr/src/app/tools/prisma/generated ./tools/prisma/generated

# Copy entrypoint script
COPY --from=builder /usr/src/app/docker-entrypoint.sh ./docker-entrypoint.sh
RUN chmod +x ./docker-entrypoint.sh

# Expose the port
EXPOSE 8081

# Run the entrypoint script
CMD ["sh", "./docker-entrypoint.sh"]